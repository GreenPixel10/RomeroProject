= libalexa ACS Library
Alexa "YukiRaven" Jones-Gonzales

A very basic ACS library that has things I tend to use over and over.

== Globals

  * `DEBUG_MODE_ENABLED_P`: When set to non-zero, this enabled output from
    `DebugLog()`.  Default: `0`.
  
  * `MAX_SPAWN_ATTEMPTS`: This defines how many times the various spawning
    functions will attempt to spawn a thing before giving up.  Default: `69`.

  * `SPAWN_SCRIPT_DELAY`: The number of tics to wait between attempts when
    attempting to spawn a thing with the various spawning functions.  Default:
    `2`;

  * `DEFAULT_MESSAGE_COLOR`: The color the various PrintMessage functions will
    use. Default: `CR_PURPLE`.



== Output/Logging Functions

=== `function void DebugLog(str message)`

When the CVar `alexa_force_debug_mode` is greater than 0, `message` will be
`Log()`ged to the screen.  The output format is `[DEBUG]: <your message here>`.

=== `function void PrintMessage(str message)`

Types out a `message` to the upper center of the screen using `HudMessage()`.
Each character will take 0.03 seconds to type.  The message will also be
`Log()`ged in the console.

===  `function void PrintMessage(str message)`

Prints `message` to the upper center of the screen using `HudMessage()`.  The
message will **NOT** be `Log()`ged in the console.

=== `function void PrintMessageInstant(str message)`

Immediately prints out a `message` to the upper center of the screen using
`HudMessage()`.  The message will also be `Log()`ged in the console.  Use the
`PrintMessage` function if you want it to be typed out letter-by-letter instead.



== Spawning Functions

=== `script "sure-spawn-tid"(int class, int spot, int tid)`

Attempts to spawn a thing of the given `class` at the given `spot`.  If it is
successful, the new thing will have the thing ID `tid`.  A `TeleportFog` thing
will also be spawned automatically at the same `spot`.  This variation will call
`SpawnSpotFacing()` internally.

If this is unsuccessful, this script will `Delay(SPAWN_SCRIPT_DELAY)` tics, then
attempt to spawn the thing again.  It will do this up to `MAX_SPAWN_ATTEMPTS`
times.

On success, a `DebugLog` message will be printed.  On complete failure, it will
`Log()` the failed attempt to the console.

=== `script "sure-spawn-facing"(int class, int spot, int fog)`

Attempts to spawn a thing of the given `class` at the given `spot`.  If it is
successful, the new thing will have the thing ID `tid`.  A `TeleportFog` thing
will also be spawned automatically at the same `spot` if `fog` is non-zero.
This variation will call `SpawnSpotFacing()` internally.

If this is unsuccessful, this script will `Delay(SPAWN_SCRIPT_DELAY)` tics, then
attempt to spawn the thing again.  It will do this up to `MAX_SPAWN_ATTEMPTS`
times.

On success, a `DebugLog` message will be printed.  On complete failure, it will
`Log()` the failed attempt to the console.

=== `function SpawnItem(str class, int spot)`

Spawn an item of the given `class` at the given `spot`.  An `ItemFog` thing will
also be spawned automatically at the same `spot`.  This function does not
re-attempt spawning if the first spawn fails.

=== `function void SpawnRange(str class, int start, int end, int showFog)`

Spawns things of the given `class` at the spots with Thing IDs starting at
`start` and ending at `end`, inclusive.  An `ItemFog` thing will also be spawned
automatically at the same spots if `showFog` is non-zero.  This function calls
`SpawnSpotFacingForced()` internally and thus some spawning attempts may fail.



== Other functions

=== `function bool UsingBrutalDoomP(void)`

Returns `true` if the function thinks the player has Brutal Doom loaded, or
`false` otherwise.  This function was adapted from HDoom.

=== `script "start-acs"(int scriptNum, int named, int wait)`

Starts an ACS script.  `scriptNum` can be either a script number, or a named
script.  If you're calling a script with a number, `named` should be `0` or
`false`.  Otherwise, if you're calling a named script, `named` should be `1` or
`true`.

If `wait` is non-zero or `true`, this will use
`ACS_NamedExecuteWait()`/`ACS_ExecuteWait()` internally.  Otherwise it will use
`ACS_NamedExecute()`/`ACS_Execute()` and will not wait for the script to finish.

This will print `DebugLog()` messages to the screen, and is the main point of
this function.

=== `script "setf-cvar"(int cvar, int newValue)`

Attempts to locate `cvar` by calling `GetUserCVar(0, cvar)`, then assigns it
`newValue`.  This will then print a `DebugLog()` message, which is the main
point of the function.

=== `script "incf-cvar"(int cvar)`

Attempts to locate `cvar` by calling `GetUserCVar(0, cvar)`, then increments its
value by `1`.  This will then print a `DebugLog()` message, which is the main
point of the function.

=== `script "decf-cvar"(int cvar)`

Attempts to locate `cvar` by calling `GetUserCVar(0, cvar)`, then decrements its
value by `1`.  This will then print a `DebugLog()` message, which is the main
point of the function.
